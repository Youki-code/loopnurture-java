# HTTP接口规范

## 目录结构规范
1. DTO目录结构
   - 所有Controller使用的请求(Request)和响应(Response)DTO必须放在server/controller/dto目录下
   - server目录下不允许直接存在dto目录
   - 适用于users和mail模块

2. DTO命名规范
   - 请求DTO必须以Request结尾
   - 响应DTO必须以Response结尾
   - DTO类名应该清晰表明其用途

3. 目录示例
```
src/main/java/org/springframework/samples/loopnurture/[module]/server/
├── controller/
│   ├── UserController.java
│   └── dto/
│       ├── UserRegistrationRequest.java
│       ├── UserRegistrationResponse.java
│       ├── UserUpdateRequest.java
│       └── UserResponse.java
├── exception/
├── config/
└── ...
```

## 请求和响应数据类型规则

1. 枚举类型处理
   - 请求(Request)和响应(Response)中不允许直接使用枚举类型
   - 请求中的枚举值必须使用Integer或String类型传入
   - 响应中的枚举值必须转换为String类型返回
   - 枚举转换必须在Service层处理

2. 数据转换规则
   - Controller层负责基础数据类型的验证
   - 枚举转换逻辑应在Service层实现
   - 使用专门的转换工具类处理枚举转换

3. 错误处理
   - 非法枚举值应该在Controller层拦截并返回400错误
   - 转换失败应该返回清晰的错误信息
   - 所有错误信息应该国际化

## 适用范围
- users模块的所有Controller
- mail模块的所有Controller

## 示例代码

```java
// Controller层 - 请求 (位于server/controller/dto/UserRequest.java)
public class UserRequest {
    private String authType; // 使用String而不是AuthTypeEnum
    private Integer userType; // 使用Integer而不是UserTypeEnum
}

// Controller层 - 响应 (位于server/controller/dto/UserResponse.java)
public class UserResponse {
    private String authType; // 使用String而不是AuthTypeEnum
    private String userType; // 使用String而不是UserTypeEnum
}

// Service层 - 转换逻辑
public class UserService {
    public UserResponse convert(User user) {
        UserResponse response = new UserResponse();
        response.setAuthType(user.getAuthType().name());
        response.setUserType(user.getUserType().name());
        return response;
    }
    
    public User convert(UserRequest request) {
        User user = new User();
        user.setAuthType(AuthTypeEnum.valueOf(request.getAuthType()));
        user.setUserType(UserTypeEnum.fromCode(request.getUserType()));
        return user;
    }
}
```

## 验证规则
1. 代码审查时检查是否有枚举类型出现在Controller层的DTO中
2. 确保所有枚举转换都在Service层处理
3. 确保错误处理符合规范
4. 确保DTO位于正确的目录结构中
5. 确保server目录下没有直接的dto目录 